name: Reusable Cloudflare Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (preview or production)'
        required: true
        type: string
      branch_name:
        description: 'Branch name for deployment'
        required: true
        type: string
    outputs:
      deployment_url:
        description: 'The deployment URL'
        value: ${{ jobs.build-and-deploy.outputs.deployment_url }}
      branch_preview_url:
        description: 'The branch preview URL'
        value: ${{ jobs.build-and-deploy.outputs.branch_preview_url }}
      deploy_success:
        description: 'Whether the deployment was successful'
        value: ${{ jobs.build-and-deploy.outputs.deploy_success }}

env:
  NODE_VERSION: "22"
  PROJECT_NAME: ${{ vars.CLOUDFLARE_PROJECT_NAME || github.event.repository.name }}
  SITE_URL: ${{ vars.SITE_URL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment-url }}
      branch_preview_url: ${{ steps.deploy.outputs.pages-deployment-alias-url }}
      deploy_success: ${{ steps.deploy.outcome == 'success' }}

    steps:
      # Checkout repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Setup package manager
      - name: Setup pnpm
        run: corepack enable pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      # Install dependencies and build
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build
        run: pnpm build
        env:
          NODE_ENV: production
          DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}
          SITE_URL: ${{ inputs.environment == 'production' && env.SITE_URL || '' }}

      # Deploy to Cloudflare Pages
      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: "v4"
          packageManager: "pnpm"
          command: >
            pages deploy ./dist
            --commit-hash=${{ github.sha }}
            --branch=${{ inputs.branch_name }}
            --project-name=${{ env.PROJECT_NAME }}
            --commit-dirty=true
