// TypeScript types for UCAN documentation processing

import type { StarlightUserConfig } from '@astrojs/starlight/types';

export interface SpecConfig {
  name: string;
  title: string;
  githubUrl: string;
  schemaUrl: string | null;
}

/**
 * Sidebar item type extracted from Starlight's user configuration schema.
 * 
 * Uses `StarlightUserConfig` which represents the INPUT type that users write
 * in their config (before Zod processing), ensuring all optional fields remain optional.
 * 
 * This type automatically stays in sync with Starlight's type definitions.
 * 
 * A sidebar item can be:
 * - A string shorthand for internal link (`'path/to/page'`)
 * - A link item with a URL (`{ label: string, link: string, ... }`)
 * - An internal link using a content collection slug (`{ slug: string, label?: string, ... }`)
 * - A manual group with nested items (`{ label: string, items: SidebarItem[], ... }`)
 * - An autogenerated group (`{ label: string, autogenerate: { directory: string }, ... }`)
 * 
 * @see https://starlight.astro.build/reference/configuration/#sidebar
 */
export type SidebarItem = NonNullable<StarlightUserConfig['sidebar']>[number];

export interface SidebarConfig {
  sidebar: SidebarItem[];
}

export interface ProcessingOptions {
  /** Whether to process IPLD schema files */
  processSchemas: boolean;
  /** Whether to create a backup of existing files */
  createBackup: boolean;
  /** Whether to remove the title from markdown body to avoid duplication with frontmatter */
  removeTitleFromBody: boolean;
  /** Maximum description length for frontmatter */
  maxDescriptionLength: number;
}

export interface ProcessingConfig {
  specs: SpecConfig[];
  sectionsToRemove: string[];
  sidebarConfig: SidebarConfig;
  options: ProcessingOptions;
}

/**
 * Helper function to define processing configuration with proper typing
 * @param config - The processing configuration object
 * @returns The same configuration object with type safety
 */
export function defineProcessingConfig(config: ProcessingConfig): ProcessingConfig {
  return config;
}
